/*
 * The MIT License (MIT)
 * Copyright 2014 Owen Rubel
 *
 * IO State (tm) Owen Rubel 2014
 * API Chaining (tm) Owen Rubel 2013
 *
 *   https://opensource.org/licenses/MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright/trademark notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package grails.api.framework

import org.slf4j.Logger
import org.slf4j.LoggerFactory
import grails.util.Environment
import grails.core.GrailsApplication
import grails.util.Holders

class ApiUtils {

    private static final Logger log = LoggerFactory.getLogger(this)

    // set at startup
    static GrailsApplication application

    private ApiUtils() {}

    private static GrailsApplication getApplication() {
        if (!application) {
            application = Holders.grailsApplication
        }
        return application
    }

    // Used for testing
    static Object getConfigProperty(String name) {
        def value = getApiConfig()
        name.split('\\.').each { String part -> value = value."$part" }
        value
    }

    // used for testing
    static void setConfigProperty(String name, value) {
        def config = getApiConfig()

        List parts = name.split('\\.')
        name = parts.remove(parts.size() - 1)

        parts.each { String part -> config = config."$part" }

        config."$name" = value
    }

    private void updateConfig() {
        def config = getApiConfig()
        if (!config) {
            file('grails-app/conf/application.groovy').withWriterAppend { BufferedWriter writer ->
                writer.newLine()
                writer.newLine()
                writer.writeLine '// Added by the Reactive API Framework plugin:'

                writer.writeLine "apitoolkit.attempts= 5"
                writer.writeLine "apitoolkit.roles= ['ROLE_USER','ROLE_ROOT','ROLE_ADMIN','ROLE_ARCH']"
                writer.writeLine "apitoolkit.chaining.enabled= true"
                writer.writeLine "apitoolkit.batching.enabled= true"
                writer.writeLine "apitoolkit.encoding= 'UTF-8'"
                writer.writeLine "apitoolkit.user.roles= ['ROLE_USER']"
                writer.writeLine "apitoolkit.admin.roles= ['ROLE_ROOT','ROLE_ADMIN','ROLE_ARCH']"
                writer.writeLine "apitoolkit.serverType= 'master'"
                writer.writeLine "apitoolkit.webhook.services= ['iostate']"
                writer.writeLine "apitoolkit.iostate.preloadDir= '/user/home/.iostate'"
                writer.writeLine "apitoolkit.corsInterceptor.includeEnvironments= ['development','test']"
                writer.writeLine "apitoolkit.corsInterceptor.excludeEnvironments= ['production']"
                writer.writeLine "apitoolkit.corsInterceptor.allowedOrigins= ['localhost:3000']"

                writer.newLine()
            }
        }
        mergeConfig(config,'DefaultSecurityConfig')
    }

    static ConfigObject getApiConfig() {
        def grailsConfig = getApplication().config
        grailsConfig.apitoolkit
    }

    private static void mergeConfig(ConfigObject currentConfig) {
        ConfigObject secondary = new ConfigSlurper(Environment.current.name).parse(new GroovyClassLoader(this.classLoader).loadClass('DefaultApiConfig'))
        mergeConfig(currentConfig, secondary.apitoolkit as ConfigObject)

        corsInterceptorConfig = (Map) grailsApplication.config.apitoolkit.corsInterceptor
    }

}